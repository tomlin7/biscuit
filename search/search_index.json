{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/app/","title":"App","text":""},{"location":"api/app/#app","title":"App","text":"<p>               Bases: <code>EventManager</code>, <code>GUIManager</code>, <code>ConfigManager</code></p>"},{"location":"api/app/#biscuit.App--biscuit-core","title":"BISCUIT CORE","text":"<p>Manages App Configuration, GUI (Tkinter), Events of the App.</p> <p>Single point of access to all the important parts of the app. Holds reference to all the components of Biscuit and every class of biscuit have a reference back to this <code>base</code> class. i.e. <code>self.base</code> is the reference to this class from any other class of biscuit.</p>"},{"location":"api/app/#biscuit.App--usage","title":"Usage","text":"<p>Example: In order to access the open editor from the git:</p> <pre><code>class Git:\n    def foo(self):\n        editor = self.base.editorsmanager.active_editor\n        if editor.content and editor.content.exists:\n            print(editor.path)\n</code></pre> <p>Example: Accessing the active editor instance from Foo class of biscuit:</p> <pre><code>class Foo:\n    def foo(self):\n        editor = self.base.editorsmanager.active_editor\n        if (editor.content and editor.content.exists):\n            print(editor.path)\n            if (editor.content.editable):\n                self.base.notifications.info(\":)\")\n</code></pre> Source code in <code>src/biscuit/app.py</code> <pre><code>class App(EventManager, GUIManager, ConfigManager):\n    \"\"\"\n    BISCUIT CORE\n    ------------\n\n    Manages App Configuration, GUI (Tkinter), Events of the App.\n\n    Single point of access to all the important parts of the app. Holds reference to all the components\n    of Biscuit and every class of biscuit have a reference back to this `base` class.\n    i.e. `self.base` is the reference to this class from any other class of biscuit.\n\n    Usage\n    -----\n\n    Example: In order to access the open editor from the git:\n\n    ```py\n    class Git:\n        def foo(self):\n            editor = self.base.editorsmanager.active_editor\n            if editor.content and editor.content.exists:\n                print(editor.path)\n    ```\n\n    Example: Accessing the active editor instance from Foo class of biscuit:\n\n    ```py\n    class Foo:\n        def foo(self):\n            editor = self.base.editorsmanager.active_editor\n            if (editor.content and editor.content.exists):\n                print(editor.path)\n                if (editor.content.editable):\n                    self.base.notifications.info(\":)\")\n    ```\n    \"\"\"\n\n    def __init__(self, appdir: str = \"\", dir: str = \"\", *args, **kwargs) -&gt; None:\n        \"\"\"Initialize the App.\n\n        Args:\n            appdir (str, optional): Directory of the app. Defaults to \"\".\n            dir (str, optional): Directory to open in the editor. Defaults to \"\".\n        \"\"\"\n\n        super().__init__(*args, **kwargs)\n        self.base = self\n        self.appdir = appdir\n\n        self.setup()\n        self.late_setup()\n        self.initialize_app(dir)\n\n    def run(self) -&gt; None:\n        \"\"\"Start the main loop of the app.\"\"\"\n\n        self.mainloop()\n        self.history.dump()\n        self.extensions_manager.stop_server()\n\n    def setup(self) -&gt; None:\n        \"\"\"Setup the app.\"\"\"\n\n        self.initialized = False\n        self.setup_path(self.appdir)\n        self.setup_configs()\n        self.initialize_tk()\n\n    def initialize_app(self, dir: str) -&gt; None:\n        \"\"\"Initialize the editor.\n\n        Args:\n            dir (str): Directory to open.\"\"\"\n\n        self.initialized = True\n\n        self.palette.generate_help_actionset()\n        self.logger.info(\"Initializing editor finished.\")\n\n        self.update_idletasks()\n        self.menubar.update()\n        self.set_title()\n        self.open_directory(dir)\n        self.focus_force()\n\n    def control_execute(self, text: str) -&gt; None:\n        try:\n            return eval(text)\n        except SyntaxError:\n            try:\n                exec(text)\n            except Exception as e:\n                return e\n        except Exception as e:\n            return e\n</code></pre>"},{"location":"api/app/#biscuit.App.__init__","title":"<code>__init__(appdir='', dir='', *args, **kwargs)</code>","text":"<p>Initialize the App.</p> <p>Parameters:</p> Name Type Description Default <code>appdir</code> <code>str</code> <p>Directory of the app. Defaults to \"\".</p> <code>''</code> <code>dir</code> <code>str</code> <p>Directory to open in the editor. Defaults to \"\".</p> <code>''</code> Source code in <code>src/biscuit/app.py</code> <pre><code>def __init__(self, appdir: str = \"\", dir: str = \"\", *args, **kwargs) -&gt; None:\n    \"\"\"Initialize the App.\n\n    Args:\n        appdir (str, optional): Directory of the app. Defaults to \"\".\n        dir (str, optional): Directory to open in the editor. Defaults to \"\".\n    \"\"\"\n\n    super().__init__(*args, **kwargs)\n    self.base = self\n    self.appdir = appdir\n\n    self.setup()\n    self.late_setup()\n    self.initialize_app(dir)\n</code></pre>"},{"location":"api/app/#biscuit.App.initialize_app","title":"<code>initialize_app(dir)</code>","text":"<p>Initialize the editor.</p> <p>Parameters:</p> Name Type Description Default <code>dir</code> <code>str</code> <p>Directory to open.</p> required Source code in <code>src/biscuit/app.py</code> <pre><code>def initialize_app(self, dir: str) -&gt; None:\n    \"\"\"Initialize the editor.\n\n    Args:\n        dir (str): Directory to open.\"\"\"\n\n    self.initialized = True\n\n    self.palette.generate_help_actionset()\n    self.logger.info(\"Initializing editor finished.\")\n\n    self.update_idletasks()\n    self.menubar.update()\n    self.set_title()\n    self.open_directory(dir)\n    self.focus_force()\n</code></pre>"},{"location":"api/app/#biscuit.App.run","title":"<code>run()</code>","text":"<p>Start the main loop of the app.</p> Source code in <code>src/biscuit/app.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Start the main loop of the app.\"\"\"\n\n    self.mainloop()\n    self.history.dump()\n    self.extensions_manager.stop_server()\n</code></pre>"},{"location":"api/app/#biscuit.App.setup","title":"<code>setup()</code>","text":"<p>Setup the app.</p> Source code in <code>src/biscuit/app.py</code> <pre><code>def setup(self) -&gt; None:\n    \"\"\"Setup the app.\"\"\"\n\n    self.initialized = False\n    self.setup_path(self.appdir)\n    self.setup_configs()\n    self.initialize_tk()\n</code></pre>"},{"location":"api/cli/","title":"CLI","text":"<p>Biscuit provides a command line interface (CLI) to interact with the main application. The CLI is a powerful tool that allows you to perform a wide range of operations, such as managing extensions, files, and settings.</p> <ul> <li> <p> General Commands</p> <p>General commands to manage the application, files, settings, and more</p> <p> Overview</p> </li> <li> <p> Editor Commands</p> <p>Commands to manage the editor, files, settings, and more</p> <p> Editor</p> </li> <li> <p> Git Commands</p> <p>Commands to manage Git repositories, branches, commits, and more</p> <p> Git</p> </li> <li> <p> Extension Commands</p> <p>Commands to manage extensions, install, update, and more</p> <p> Extensions</p> </li> </ul>"},{"location":"api/cli/#overview","title":"Overview","text":""},{"location":"api/cli/#biscuit.cli.cli.cli","title":"<code>cli(path=None, dev=False)</code>","text":"<p>Biscuit CLI</p> <p>Run <code>biscuit &lt;path&gt;</code> to open a folder/file (<code>biscuit .</code> for this directory)</p> Source code in <code>src/biscuit/cli/cli.py</code> <pre><code>@click.group(cls=BiscuitCLI, invoke_without_command=True)\n@click.version_option(__version__, \"-v\", \"--version\", message=\"Biscuit v%(version)s\")\n@click.help_option(\"-h\", \"--help\")\n@click.option(\"--dev\", is_flag=True, help=\"Run in development mode\")\ndef cli(path=None, dev=False):\n    \"\"\"Biscuit CLI\n\n    Run `biscuit &lt;path&gt;` to open a folder/file\n    (`biscuit .` for this directory)\n    \"\"\"\n\n    click.echo(f\"Biscuit v{__version__} {'(dev) \ud83d\udea7' if dev else '\ud83d\ude80'}\")\n</code></pre>"},{"location":"api/cli/#biscuit.cli.cli.docs","title":"<code>docs()</code>","text":"<p>Open biscuit documentation</p> <p>This command will open the biscuit documentation in the default browser.</p> Example <p>biscuit doc</p> Source code in <code>src/biscuit/cli/cli.py</code> <pre><code>@cli.command(\"doc\")\ndef docs():\n    \"\"\"Open biscuit documentation\n\n    This command will open the biscuit documentation in the default browser.\n\n    Example:\n        biscuit doc\n    \"\"\"\n\n    click.launch(\"https://tomlin7.github.io/biscuit/\")\n    exit()\n</code></pre>"},{"location":"api/cli/#biscuit.cli.cli.run","title":"<code>run()</code>","text":"<p>Setup the CLI and run the CLI</p> Source code in <code>src/biscuit/cli/cli.py</code> <pre><code>def run():\n    \"\"\"Setup the CLI and run the CLI\"\"\"\n\n    setup()\n    cli()\n</code></pre>"},{"location":"api/cli/#biscuit.cli.cli.setup","title":"<code>setup()</code>","text":"<p>Setup the CLI commands</p> <p>Loads all the commands from the cli extensions and registers them</p> Source code in <code>src/biscuit/cli/cli.py</code> <pre><code>def setup():\n    \"\"\"Setup the CLI commands\n\n    Loads all the commands from the cli extensions and registers them\"\"\"\n\n    extensions.register(cli)\n    git.register(cli)\n    editor.register(cli)\n</code></pre>"},{"location":"api/cli/#editor-commands","title":"Editor Commands","text":""},{"location":"api/cli/#biscuit.cli.editor.goto","title":"<code>goto(path=None, linecol=None)</code>","text":"<p>Open a file and go to a specific location</p> <p>This command will open a file and go to a specific location.</p> Example <p>biscuit goto path/to/file line </p> <p>biscuit goto path/to/file line:column</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file. Defaults to None.</p> <code>None</code> <code>linecol</code> <code>str</code> <p>The line and column to go to. Defaults to None.</p> <code>None</code> Source code in <code>src/biscuit/cli/editor.py</code> <pre><code>@click.command()\n@click.argument(\n    \"path\",\n    type=click.Path(\n        exists=True,\n        dir_okay=False,\n        resolve_path=True,\n    ),\n    required=False,\n)\n@click.argument(\"linecol\", type=str, required=False)\ndef goto(path=None, linecol=None) -&gt; typing.Callable[[App, str], None]:\n    \"\"\"Open a file and go to a specific location\n\n    This command will open a file and go to a specific location.\n\n    Example:\n        biscuit goto path/to/file line \\n\n        biscuit goto path/to/file line:column\n\n    Args:\n        path (str, optional): The path to the file. Defaults to None.\n        linecol (str, optional): The line and column to go to. Defaults to None.\n    \"\"\"\n\n    if not path:\n        path = click.prompt(\"path/to/file\", type=str)\n    if not linecol:\n        linecol = click.prompt(\"line:column\", type=str)\n    if not linecol:\n        linecol = \"1:1\"\n\n    # TODO: make the column optional\n\n    return lambda app, path=path, linecol=linecol: app.goto_location(\n        path, linecol.replace(\":\", \".\")\n    )\n</code></pre>"},{"location":"api/cli/#biscuit.cli.editor.open","title":"<code>open(path=None)</code>","text":"<p>Open a file or folder in the editor</p> <p>This command will open a file or folder in the editor.</p> Example <p>biscuit open path/to/file</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file or folder. Defaults to None.</p> <code>None</code> Source code in <code>src/biscuit/cli/editor.py</code> <pre><code>@click.command()\n@click.argument(\n    \"path\",\n    type=click.Path(\n        exists=True,\n        dir_okay=True,\n        resolve_path=True,\n    ),\n    required=False,\n)\ndef open(path=None) -&gt; typing.Callable[[App, str], None]:\n    \"\"\"Open a file or folder in the editor\n\n    This command will open a file or folder in the editor.\n\n    Example:\n        biscuit open path/to/file\n\n    Args:\n        path (str, optional): The path to the file or folder. Defaults to None.\n    \"\"\"\n\n    return lambda app, path=path: app.open(path)\n</code></pre>"},{"location":"api/cli/#git-commands","title":"Git Commands","text":""},{"location":"api/cli/#biscuit.cli.git.clone","title":"<code>clone(url)</code>","text":"<p>Clone &amp; open a git repository in Biscuit</p> <p>This command will clone a git repository and open it in a new window.</p> Example <p>biscuit clone</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the git repository</p> required Source code in <code>src/biscuit/cli/git.py</code> <pre><code>@click.command()\n@click.argument(\"url\", type=str)\ndef clone(url) -&gt; typing.Callable[[App, str], None]:\n    \"\"\"Clone &amp; open a git repository in Biscuit\n\n    This command will clone a git repository and open it in a new window.\n\n    Example:\n        biscuit clone\n\n    Args:\n        url (str): The url of the git repository\n    \"\"\"\n\n    if not url:\n        url = click.prompt(\"Git repository url\", type=str)\n\n    click.echo(\n        f\"Cloning repository from {'https://github.com/' if not URL.match(url) else ''}{url}\"\n    )\n    return lambda app, url=url: app.clone_repo(url, new_window=False)\n</code></pre>"},{"location":"api/cli/#biscuit.cli.git.diff","title":"<code>diff(file1=None, file2=None)</code>","text":"<p>Diff two files</p> <p>This command will open a new window with the diff of the two files.</p> Example <p>biscuit diff path/to/file path/to/second/file</p> <p>Parameters:</p> Name Type Description Default <code>file1</code> <code>str</code> <p>The path to the first file. Defaults to None.</p> <code>None</code> <code>file2</code> <code>str</code> <p>The path to the second file. Defaults to None.</p> <code>None</code> Source code in <code>src/biscuit/cli/git.py</code> <pre><code>@click.command()\n@click.argument(\n    \"file1\",\n    type=click.Path(\n        exists=True,\n        dir_okay=False,\n        resolve_path=True,\n    ),\n    required=False,\n)\n@click.argument(\n    \"file2\",\n    type=click.Path(\n        exists=True,\n        dir_okay=False,\n        resolve_path=True,\n    ),\n    required=False,\n)\ndef diff(file1=None, file2=None) -&gt; typing.Callable[[App, str], None]:\n    \"\"\"Diff two files\n\n    This command will open a new window with the diff of the two files.\n\n    Example:\n        biscuit diff path/to/file path/to/second/file\n\n    Args:\n        file1 (str, optional): The path to the first file. Defaults to None.\n        file2 (str, optional): The path to the second file. Defaults to None.\"\"\"\n\n    if not file1:\n        file1 = click.prompt(\"path/to/file\", type=str)\n    if not file2:\n        file2 = click.prompt(\"path/to/second/file\", type=str)\n\n    return lambda app, file1=file1, file2=file2: app.diff_files(file1, file2)\n</code></pre>"},{"location":"api/cli/#extension-commands","title":"Extension Commands","text":""},{"location":"api/cli/#biscuit.cli.extensions.dev","title":"<code>dev()</code>","text":"<p>Start the extension development server</p> <p>This command will load the extension located in the current working directory and start Biscuit in development mode. The command assumes that the current directory is the root of the extension project (i.e. it contains a <code>pyproject.toml</code> or a <code>src/&lt;name&gt;/</code> package with a <code>setup</code> entrypoint).</p> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\ndef dev():\n    \"\"\"Start the extension development server\n\n    This command will load the extension located in the current working directory and\n    start Biscuit in development mode. The command assumes that the\n    current directory is the root of the extension project (i.e. it\n    contains a ``pyproject.toml`` or a ``src/&lt;name&gt;/`` package with a\n    ``setup`` entrypoint).\n    \"\"\"\n\n    click.echo(\"Extension development server started!\")\n\n    def f(app: App) -&gt; None:\n        \"\"\"Load the extension located in the current working directory and\n        start Biscuit in development mode. The command assumes that the\n        current directory is the root of the extension project (i.e. it\n        contains a ``pyproject.toml`` or a ``src/&lt;name&gt;/`` package with a\n        ``setup`` entrypoint).\"\"\"\n\n        cwd = Path.cwd()\n\n        src_dir = cwd / \"src\"\n        ext_name: str | None = None\n\n        if src_dir.is_dir():\n            for candidate in src_dir.iterdir():\n                if candidate.is_dir() and (candidate / \"__init__.py\").exists():\n                    ext_name = candidate.name\n                    break\n\n        if not ext_name:\n            click.echo(\n                \"Could not find any Python package inside the 'src' directory. \"\n                \"Ensure your extension code is located at src/&lt;extension_name&gt;/\"\n            )\n            return\n\n        init_py = src_dir / ext_name / \"__init__.py\"\n\n        if not init_py.exists():\n            click.echo(\n                \"Could not locate extension package. Expected \"\n                f\"{init_py}. Ensure you are in the root of an extension repo.\"\n            )\n            return\n\n        for p in (str(cwd), str(src_dir)):\n            if p not in sys.path:\n                sys.path.insert(0, p)\n\n        spec = _importlib_util.spec_from_file_location(f\"src.{ext_name}\", init_py)\n        if spec is None or spec.loader is None:\n            click.echo(\"Failed to create import spec for the extension module.\")\n            return\n\n        module = _importlib_util.module_from_spec(spec)\n        try:\n            spec.loader.exec_module(module) \n        except Exception as exc:\n            click.echo(f\"Importing extension failed: {exc}\")\n            return\n\n        if hasattr(module, \"setup\") and callable(module.setup):\n            try:\n                module.setup(app.api)\n                click.echo(f\"Loaded extension '{ext_name}'.\")\n            except Exception as exc:\n                click.echo(f\"setup() raised an exception: {exc}\")\n                return\n        else:\n            click.echo(\"Extension module does not define a callable setup(api) function.\")\n            return\n\n        app.deiconify()\n        app.run()\n\n    return f\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.ext","title":"<code>ext()</code>","text":"<p>Commands for managing and developing biscuit extensions</p> <p>This command group allows you to manage and develop biscuit extensions.</p> <p>Examples::</p> <pre><code>biscuit ext list\nbiscuit ext install extension_name\nbiscuit ext uninstall extension_name\n</code></pre> <p>Extension Dev commands::</p> <pre><code>biscuit ext new my_extension\nbiscuit ext dev\nbiscuit ext test\n</code></pre> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@click.group(invoke_without_command=True)\n@click.help_option(\"-h\", \"--help\")\ndef ext():\n    \"\"\"Commands for managing and developing biscuit extensions\n\n    This command group allows you to manage and develop biscuit extensions.\n\n    Examples::\n\n        biscuit ext list\n        biscuit ext install extension_name\n        biscuit ext uninstall extension_name\n\n    Extension Dev commands::\n\n        biscuit ext new my_extension\n        biscuit ext dev\n        biscuit ext test\n    \"\"\"\n    ...\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.info","title":"<code>info(name)</code>","text":"<p>Show information about an extension by name</p> <p>Example::</p> <pre><code>biscuit ext info extension_name\n</code></pre> <p>Args::</p> <pre><code>name (str): The name of the extension\n</code></pre> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\n@click.argument(\"name\", required=False)\ndef info(name: str | None) -&gt; typing.Callable[[App], None]:\n    \"\"\"Show information about an extension by name\n\n    Example::\n\n        biscuit ext info extension_name\n\n    Args::\n\n        name (str): The name of the extension\"\"\"\n\n    def f(app: App, name=name) -&gt; None:\n        data = app.extensions_manager.find_extension_by_name(name)\n        if data:\n            click.echo(f\"Name: {name}\")\n            click.echo(f\"Author: {data[1]}\")\n            click.echo(f\"Description: {data[2]}\")\n            # TODO: click.echo(f\"Version: {data[3]}\")\n        else:\n            click.echo(f\"Could not find extension {name}\")\n\n    return f\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.install","title":"<code>install(name)</code>","text":"<p>Install an extension by name</p> <p>Example::</p> <pre><code>biscuit ext install extension_name\n</code></pre> <p>Args::</p> <pre><code>name (str): The name of the extension\n</code></pre> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\n@click.argument(\"name\")\ndef install(name: str) -&gt; typing.Callable[[App], None]:\n    \"\"\"Install an extension by name\n\n    Example::\n\n        biscuit ext install extension_name\n\n    Args::\n\n        name (str): The name of the extension\n    \"\"\"\n\n    def f(app: App, name=name) -&gt; None:\n        if app.extensions_manager.install_extension_from_name(name):\n            click.echo(f\"Installed extension {name} successfully\")\n        else:\n            click.echo(f\"Could not find extension {name}\")\n\n    return f\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.list_ext","title":"<code>list_ext(user, installed)</code>","text":"<p>List all extensions or installed or filter by user</p> <p>Example::</p> <pre><code>biscuit ext list\nbiscuit ext list -u user\nbiscuit ext list -i\n</code></pre> <p>Args::</p> <pre><code>user (str): Filter by user\ninstalled (bool): Show installed extensions\n</code></pre> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command(\"list\")\n@click.option(\"-u\", \"--user\", help=\"Filter by user\")\n@click.option(\"-i\", \"--installed\", is_flag=True, help=\"Show installed extensions\")\ndef list_ext(user, installed) -&gt; typing.Callable[[App], typing.List[str]]:\n    \"\"\"List all extensions or installed or filter by user\n\n    Example::\n\n        biscuit ext list\n        biscuit ext list -u user\n        biscuit ext list -i\n\n    Args::\n\n        user (str): Filter by user\n        installed (bool): Show installed extensions\n    \"\"\"\n\n    if user:\n        click.echo(f\"Listing extensions by {user}\\n\")\n\n        def f(app: App, user=user) -&gt; None:\n            for i, data in enumerate(\n                app.extensions_manager.list_extensions_by_user(user)\n            ):\n                click.echo(f\"[{i}] {data[0]}: \" + data[1][-1])\n\n        return f\n\n    elif installed:\n        click.echo(\"Listing installed extensions\\n\")\n\n        def f(app: App) -&gt; None:\n            for i, data in enumerate(\n                app.extensions_manager.list_installed_extensions()\n            ):\n                click.echo(\n                    f\"[{i}] {data[0]}: \" + \", \".join(data[1]) if data[1] else \" ... \"\n                )\n\n        return f\n    else:\n        click.echo(\"Listing all extensions\\n\")\n\n        def f(app: App) -&gt; None:\n            for i, data in enumerate(app.extensions_manager.list_all_extensions()):\n                click.echo(f\"[{i}] {data[0]}: \" + \", \".join(data[1][1:]))\n\n        return f\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.new","title":"<code>new(name, template, output, description, author, version, force)</code>","text":"<p>Create a new Biscuit extension project from a scaffold template.</p> <p>Examples::</p> <pre><code>biscuit ext new my_extension                # uses default template\nbiscuit ext new my_extension -t widget      # uses a named template\nbiscuit ext new my_extension -t https://github.com/user/repo.git\n</code></pre> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\n@click.argument(\"name\", required=False)\n@click.option(\n    \"-t\",\n    \"--template\",\n    default=\"default\",\n    help=\"Template name or git URL for the scaffold (default: 'default').\",\n)\n@click.option(\n    \"-o\",\n    \"--output\",\n    default=\".\",\n    type=click.Path(file_okay=False, resolve_path=True),\n    help=\"Destination directory where the scaffolded extension will be created.\",\n)\n@click.option(\"-d\", \"--description\", help=\"Short description of the extension.\")\n@click.option(\"-a\", \"--author\", help=\"Author (Name &lt;email@example.com&gt;).\")\n@click.option(\"-v\", \"--version\", help=\"Initial version (default: 0.1.0).\", default=None)\n@click.option(\"--force\", is_flag=True, help=\"Overwrite destination if it already exists.\")\ndef new(name: str | None, template: str, output: str, description: str | None, author: str | None, version: str | None, force: bool) -&gt; None:\n    \"\"\"Create a new Biscuit extension project from a scaffold template.\n\n    Examples::\n\n        biscuit ext new my_extension                # uses default template\n        biscuit ext new my_extension -t widget      # uses a named template\n        biscuit ext new my_extension -t https://github.com/user/repo.git\n    \"\"\"\n\n    from biscuit.extensions.scaffolder import create_extension\n\n    raw_name = name or click.prompt(\"Extension name\", type=str)\n\n    # slugify the extension name: lowercase, replace whitespace and invalid chars with underscore\n    def _slugify(value: str) -&gt; str:\n        value = value.strip().lower()\n        value = re.sub(r\"[\\s\\-]+\", \"_\", value)\n        value = re.sub(r\"[^0-9a-z_]+\", \"\", value)\n        value = re.sub(r\"_+\", \"_\", value)\n        return value or \"extension\"\n\n    ext_name = _slugify(raw_name)\n\n    if ext_name != raw_name:\n        click.echo(f\"Using sanitized extension name '{ext_name}' (from '{raw_name}')\")\n\n    dest = Path(output).expanduser().resolve() \n\n    # interactive prompts\n    ctx: dict[str, str] = {}\n    desc_val = description or click.prompt(\"Description\", default=\"A Biscuit extension.\")\n    ctx[\"description\"] = desc_val\n\n    author_val = author or click.prompt(\"Author (Name &lt;email&gt;)\", default=\"Your Name &lt;email@example.com&gt;\")\n    ctx[\"author\"] = author_val\n\n    ver_val = version or click.prompt(\"Version\", default=\"0.1.0\")\n    ctx[\"version\"] = ver_val\n\n    click.echo(f\"Creating extension '{ext_name}' using template '{template}' \u2026\")\n    ok = create_extension(\n        ext_name,\n        template=template,\n        output_dir=dest,\n        force=force,\n        extra_context=ctx,\n    )\n\n    if ok:\n        click.echo(f\"Extension scaffold created at {dest / ext_name}\")\n    else:\n        click.echo(\"Failed to create extension scaffold.\")\n\n    return None\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.publish","title":"<code>publish(skip_tests)</code>","text":"<p>Guide for publishing the extension to the Biscuit marketplace.</p> <p>Biscuit extensions are distributed via the central <code>biscuit-extensions</code> repository which aggregates extension git submodules (see https://github.com/tomlin7/biscuit-extensions).  This command validates the current project, optionally runs the test-suite and then prints step-by-step instructions on how to add your repository as a submodule and update <code>extensions.toml</code>.</p> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\n@click.option(\"--skip-tests\", is_flag=True, help=\"Skip running tests before preparing publish instructions.\")\ndef publish(skip_tests: bool):\n    \"\"\"Guide for publishing the extension to the Biscuit marketplace.\n\n    Biscuit extensions are distributed via the central\n    `biscuit-extensions` repository which aggregates extension **git\n    submodules** (see &lt;https://github.com/tomlin7/biscuit-extensions&gt;).  This\n    command validates the current project, optionally runs the test-suite and\n    then prints step-by-step instructions on how to add your repository as a\n    submodule and update `extensions.toml`.\n    \"\"\"\n\n    cwd = Path.cwd()\n\n    # validation\n    src_dir = cwd / \"src\"\n    pkg_name: str | None = None\n    if src_dir.is_dir():\n        for candidate in src_dir.iterdir():\n            if candidate.is_dir() and (candidate / \"__init__.py\").exists():\n                pkg_name = candidate.name\n                break\n\n    if pkg_name is None:\n        click.echo(\"Could not determine the extension package inside 'src/'. Aborting.\")\n        return\n\n    pyproject = cwd / \"pyproject.toml\"\n    meta: dict[str, str] = {}\n    if pyproject.exists():\n        try:\n            import toml\n            p_data = toml.load(pyproject).get(\"tool\", {}).get(\"poetry\", {})\n            meta = {\n                \"name\": p_data.get(\"name\", pkg_name),\n                \"author\": \", \".join(p_data.get(\"authors\", [])) or \"&lt;your-name&gt;\",\n                \"description\": p_data.get(\"description\", \"A Biscuit extension.\"),\n                \"version\": p_data.get(\"version\", \"0.1.0\"),\n            }\n        except Exception:\n            meta = {\n                \"name\": pkg_name,\n                \"author\": \"&lt;your-name&gt;\",\n                \"description\": \"A Biscuit extension.\",\n                \"version\": \"0.1.0\",\n            }\n    else:\n        meta = {\n            \"name\": pkg_name,\n            \"author\": \"&lt;your-name&gt;\",\n            \"description\": \"A Biscuit extension.\",\n            \"version\": \"0.1.0\",\n        }\n\n    # optional tests\n    if not skip_tests and (cwd / \"tests\").exists():\n        click.echo(\"Running tests before publishing \u2026\")\n        import pytest\n        exit_code = pytest.main([], plugins=None)\n        if exit_code != 0:\n            click.echo(\"Tests failed \u2013 resolve them before publishing.\")\n            sys.exit(exit_code)\n\n    # publishing instructions\n    click.echo(\"\\nYour extension is ready to be published! Follow these steps:\\n\")\n\n    repo_url_placeholder = \"&lt;your-extension-git-url&gt;\"\n    instructions = f\"\"\"\n1. Fork the central repository:\n       https://github.com/tomlin7/biscuit-extensions\n\n2. Clone *your fork* locally:\n       git clone https://github.com/&lt;your-github-username&gt;/biscuit-extensions.git\n       cd biscuit-extensions\n\n3. Add your extension as a git submodule:\n       git submodule add {repo_url_placeholder} extensions/{pkg_name}\n\n4. Initialise &amp; update submodules:\n       git submodule update --init --remote\n\n5. Register your extension by editing *extensions.toml* and appending:\n\n       [{pkg_name}]\n       submodule = \"{pkg_name}\"\n       name = \"{meta['name']}\"\n       author = \"{meta['author']}\"\n       description = \"{meta['description']}\"\n       version = \"{meta['version']}\"\n\n6. Commit and push the changes:\n       git add extensions/{pkg_name} extensions.toml .gitmodules\n       git commit -m \"Add {pkg_name} extension\"\n       git push origin main\n\n7. Open a Pull Request from your fork against the *tomlin7/biscuit-extensions* `main` branch.\n\nOnce the PR is reviewed and merged, your extension will appear in the Biscuit marketplace! \u2728\n\"\"\"\n\n    click.echo(instructions)\n\n    return None\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.test","title":"<code>test(keyword, verbose)</code>","text":"<p>Run the extension's pytest suite.</p> <p>Stand in the root of your extension project and run::</p> <pre><code>biscuit ext test\n</code></pre> <p>The command locates the <code>tests</code> directory (or any test_.py / _test.py files) under the current working directory and executes them with pytest. You can forward a -k keyword expression and enable verbose output via -v.</p> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\n@click.option(\"-k\", \"--keyword\", help=\"Only run tests which match the given keyword expression.\")\n@click.option(\"-v\", \"--verbose\", is_flag=True, help=\"Run tests with verbose output.\")\ndef test(keyword: str | None, verbose: bool):\n    \"\"\"Run the extension's pytest suite.\n\n    Stand in the root of your extension project and run::\n\n        biscuit ext test\n\n    The command locates the ``tests`` directory (or any *test_*.py / *_test.py*\n    files) under the current working directory and executes them with\n    **pytest**. You can forward a *-k* keyword expression and enable *verbose*\n    output via *-v*.\n    \"\"\"\n\n    from pathlib import Path\n\n    import pytest\n\n    cwd = Path.cwd()\n\n    if not (cwd / \"tests\").exists():\n        click.echo(\"No 'tests' directory found in current location - nothing to test.\")\n        return None\n\n    click.echo(\"Running pytest\u2026\")\n\n    args: list[str] = []\n    if verbose:\n        args.append(\"-v\")\n    if keyword:\n        args.extend([\"-k\", keyword])\n\n    exit_code = pytest.main(args, plugins=None)\n\n    if exit_code == 0:\n        click.echo(\"All tests passed! \ud83c\udf89\")\n    else:\n        click.echo(f\"Tests failed with exit code {exit_code}.\")\n        sys.exit(exit_code)\n\n    return None\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.uninstall","title":"<code>uninstall(name)</code>","text":"<p>Uninstall an extension by name</p> <p>Example::</p> <pre><code>biscuit ext uninstall extension_name\n</code></pre> <p>Args::</p> <pre><code>name (str): The name of the extension\n</code></pre> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\n@click.argument(\"name\")\ndef uninstall(name: str) -&gt; typing.Callable[[App], None]:\n    \"\"\"Uninstall an extension by name\n\n    Example::\n\n        biscuit ext uninstall extension_name\n\n    Args::\n\n        name (str): The name of the extension\n    \"\"\"\n\n    def f(app: App, name=name) -&gt; None:\n        if app.extensions_manager.uninstall_extension_from_name(name):\n            click.echo(f\"Uninstalled extension {name} successfully\")\n        else:\n            click.echo(f\"Could not find extension {name}\")\n\n    return f\n</code></pre>"},{"location":"api/cli/#biscuit.cli.extensions.update","title":"<code>update(skip_tests)</code>","text":"<p>Guide for updating an already published extension.</p> <p>Produces a checklist for bumping your extension to a new version in the <code>biscuit-extensions</code> repository. Similar to publish, but assumes the extension submodule already exists and only needs a version/commit update.</p> Source code in <code>src/biscuit/cli/extensions.py</code> <pre><code>@ext.command()\n@click.option(\"--skip-tests\", is_flag=True, help=\"Skip running tests before preparing update instructions.\")\ndef update(skip_tests: bool):\n    \"\"\"Guide for updating an *already published* extension.\n\n    Produces a checklist for bumping your extension to a new version in the\n    `biscuit-extensions` repository. Similar to *publish*, but assumes the\n    extension submodule already exists and only needs a version/commit\n    update.\n    \"\"\"\n\n    from pathlib import Path\n\n    cwd = Path.cwd()\n\n    src_dir = cwd / \"src\"\n    pkg_name: str | None = None\n    if src_dir.is_dir():\n        for candidate in src_dir.iterdir():\n            if candidate.is_dir() and (candidate / \"__init__.py\").exists():\n                pkg_name = candidate.name\n                break\n\n    if pkg_name is None:\n        click.echo(\"Could not determine the extension package inside 'src/'. Aborting.\")\n        return\n\n    # extract current version from pyproject\n    new_version = \"0.1.0\"\n    pyproject = cwd / \"pyproject.toml\"\n    if pyproject.exists():\n        try:\n            import toml\n            new_version = toml.load(pyproject).get(\"tool\", {}).get(\"poetry\", {}).get(\"version\", new_version)\n        except Exception:\n            pass\n\n    # optional tests\n    if not skip_tests and (cwd / \"tests\").exists():\n        click.echo(\"Running tests before update \u2026\")\n        import pytest\n        exit_code = pytest.main([], plugins=None)\n        if exit_code != 0:\n            click.echo(\"Tests failed - resolve them before updating.\")\n            sys.exit(exit_code)\n\n    click.echo(\"\\nFollow these steps to update your extension in the marketplace:\\n\")\n\n    instructions = f\"\"\"\n1. Push latest changes of your extension repository (make sure tag/branch with the new version {new_version} is published).\n\n2. Open your fork of *biscuit-extensions*:\n       https://github.com/&lt;your-github-username&gt;/biscuit-extensions\n\n3. Pull latest updates from upstream and update the submodule to the new commit:\n       git checkout main\n       git remote add upstream https://github.com/tomlin7/biscuit-extensions.git\n       git pull upstream main\n       git submodule update --init --remote extensions/{pkg_name}\n\n4. Edit *extensions.toml* to bump the reported version to \"{new_version}\".\n\n5. Commit the changes:\n       git add extensions/{pkg_name} extensions.toml\n       git commit -m \"Update {pkg_name} to {new_version}\"\n       git push origin main\n\n6. Open a Pull Request to *tomlin7/biscuit-extensions* `main` branch.\n\nOnce merged, users will receive the updated version automatically in Biscuit.\n\"\"\"\n\n    click.echo(instructions)\n\n    return None\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#installation","title":"Installation","text":"<p>Note</p> <p>Python 3.11 or above is required for building Biscuit.</p> <p>Recommended way to install Biscuit is via pip:</p> <pre><code>pip install biscuit-editor\n</code></pre> <p>Try running <code>biscuit --version</code> in your terminal to check if the installation was successful.</p> <p>Pre-requisites for Linux</p> <p>Linux distribtions require some system packages to be installed prior to the installation.</p> <p>For Debian based distributions, <pre><code>$ sudo apt install fontconfig libfontconfig1 libfontconfig1-dev cmake cmake-data extra-cmake-modules build-essential\n$ python3 -m pip install scikit-build\n</code></pre> For Arch Linux based distributions, <pre><code>$ sudo pacman -Sy\n$ sudo pacman -S base-devel cmake extra-cmake-modules fontconfig tcl tk\n$ python -m pip install scikit-build\n$ python -m pip install tkextrafont\n</code></pre></p> <p>For compiling from source code, please check the installation guide.</p>"},{"location":"getting-started/installation/#alternative-installation-methods","title":"Alternative Installation Methods","text":"<ol> <li>Standalone Builds: </li> <li>Grab the latest stable build from releases page</li> <li> <p>For unstable nightly builds, check the GitHub actions</p> </li> <li> <p>Compiling from source:     For instructions on compiling from source code, please refer to the installation guide.</p> </li> </ol>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you set up Biscuit in 5 minutes. </p>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<p>Recommended way to install Biscuit is via pip:</p> <pre><code>pip install biscuit-editor\n</code></pre> <p>Try running <code>biscuit --version</code> in your terminal to check if the installation was successful.</p> <p>See the installation guide for more detailed instructions on installing Biscuit.</p>"},{"location":"getting-started/quick-start/#starting-biscuit","title":"Starting Biscuit","text":"<p>Next, you can start using Biscuit by simply running:</p> <pre><code>biscuit\n</code></pre> <p>You can also open a directory/file directly by running:</p> <pre><code>biscuit path/to/folder\n</code></pre> <p>This will open the specified directory/file in Biscuit. For more options, run <code>biscuit --help</code> or check the CLI reference.</p>"},{"location":"getting-started/quick-start/#user-interface","title":"User Interface","text":"<p>Biscuit's user interface is designed to be minimalistic and more focused on the content. When you open Biscuit you'll see a welcome tab with quick access to common actions. At the bottom, you'll find the status bar which also has buttons to show/hide the sidebar views and terminal. Buttons on the left and right will toggle the sidebars of corresponding sides. </p> <p></p> <p>To view all commands available in Biscuit, press <code>Ctrl+Shift+P</code> or the command palette button from titlebar. This will open the command palette where you can search for commands. The titlebar contains a simple menu bar and a search bar which can be used to search for files in the opened workspace.</p>"},{"location":"getting-started/quick-start/#terminals","title":"Terminals","text":"<p>Biscuit can have multiple integrated terminals running in the editor. You can open a terminal by clicking on the panel toggle on the status bar or by pressing Ctrl+`. To open more terminals, click on the plus icon and pick from the options (depending on the OS cmd, bash, powershell, etc. will be available).</p>"},{"location":"getting-started/quick-start/#extensions","title":"Extensions","text":"<p>To Browse extensions click on Extensions from welcome tab or the extensions button on the status bar. You can install recommended extensions and access them instantly as they are installed. </p>"},{"location":"getting-started/quick-start/#git","title":"Git","text":"<p>Biscuit has built-in Git support, so you can manage your Git repositories directly from the editor. Click on the Source Control icon on the status bar to open the Git view.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Configure Biscuit</li> </ul>"},{"location":"usage/cli/","title":"CLI","text":"<p>Biscuit provides a command line interface (CLI) to interact with the main application. The CLI is a powerful tool that allows you to perform a wide range of operations, such as managing extensions, files, and settings.</p>"},{"location":"usage/cli/#todo-add-cli-documentation","title":"TODO: Add CLI documentation","text":""}]}